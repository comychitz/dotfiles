# main()
snippet main
	int main( int argc, const char *argv[] )
	{
	  ${1}
	  return 0;
	}
snippet mainn
	int main( void )
	{
	  ${1}
	  return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
snippet headerguard
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}
	#define $1
	#endif // `toupper(Filename('$1_H', 'UNTITLED_H'))`
# If Condition
snippet if
	if (${1:/* condition */}) 
	{
	  ${2:/* code */}
	}
# else
snippet el
	else 
	{
	  ${1}
	}
# else if
snippet elif
	else if (${1:/* condition */})
	{
	  ${2:/* TODO */}
	}
# Ternary conditional
snippet ternary
	${1:/* TODO */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
	  ${2:/* TODO*/}
	} while( ${1:/* condition */} );
# While Loop
snippet while
	while( ${1:/* condition */} ) 
	{
	  ${2:/* TODO */}
	}
# For Loop
snippet for
	for( ${2:i} = 0; $2 < ${1:count}; $2${3:++}) 
	{
	  ${4:/* TODO */}
	}
# For Loop with the i declaration above
snippet fori
	int i;
	for( ${2:i} = 0; $2 < ${1:count}; $2${3:++}) 
	{
	  ${4:/* TODO */}
	}
# Function
snippet function
	${1:void} ${2:function_name}(${3})
	{
	  ${4:/* TODO */}
	}
# switch
snippet switch
	switch (${1}) 
	{
	  case ${2}: {
	    ${3}
	    break;
	  }
	  default: {
	    // replace me or erase me!
	    break;
	  }
	}
# Function Declaration
snippet functiondec
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet typdef
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet struct
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet printf
	printf( "${1:%s}\n"${2} );${3}
# my littel shortcut when i like to print out statements when debugging
snippet phere
	printf( "here${1}!\n" ); // TODO - delete me!
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fprintf
	fprintf( ${1:stderr}, "${2:%s}\n"${3} );${4}
# This is kind of convenient
snippet .
	[${1}]${2}
# multiline comment snippet
snippet /*
	/* ${1:comment} */
# function declaration comment snippet
snippet functioncomment
	/*******************************************************************************
	 * Description: ${1}
	 * 
	 * Inputs: ${2}
	 * 
	 * Returns: ${3}
	 ******************************************************************************/
	 ${4}
# top of file comment snippet
snippet filecomment
	/*******************************************************************************
	* Filename: ${1:`expand('%:t')` }
	*
	* Description: ${2}
	* 
	* Notes: ${3}
	*
	* History: ${4}
	*******************************************************************************/
	${5}
snippet bufferoff
	setvbuf(stdout, NULL, _IONBF, 0);
# big comment section like a small function description 
# or something of that nature
snippet bigcomment
	/***
	 * ${1}
	 **/
